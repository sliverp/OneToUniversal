import os, time, argparse
from PIL import Image
import numpy as np


import torch
from torchvision import transforms

from torchvision.utils import save_image as imwrite
from utils.utils import print_args, load_restore_ckpt, load_embedder_ckpt,compare_psnr,compare_ssim
from torch.utils.data import DataLoader, Dataset, random_split
from sence_descrimnator.dataset import MultiDegradeDataset
from sence_descrimnator.model import SenceDescrimnator
from tqdm import tqdm

transform_resize = transforms.Compose([
        transforms.Resize([224,224],antialias=True),
        # transforms.ToTensor()
        ]) 

def main(args):

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    #train
    print('> Model Initialization...')

    embedder = load_embedder_ckpt(device, freeze_model=True, ckpt_name=args.embedder_model_path)
    restorer = load_restore_ckpt(device, freeze_model=True, ckpt_name=args.restore_model_path)

    os.makedirs(args.output,exist_ok=True)

    print('> Destset Initialization...')
    dataset = MultiDegradeDataset('/home/liyh/train2017_degrade', '/home/liyh/train2017')
    train_ratio = 0.8
    train_size = int(train_ratio * len(dataset))
    test_size = len(dataset) - train_size
    _, test_set = random_split(dataset, [train_size, test_size], generator=torch.Generator().manual_seed(42))
    test_loader = DataLoader(
        test_set, 
        batch_size=8, shuffle=False,
        num_workers=16
    )
    
    files = os.listdir(argspar.input)
    time_record = []
    bar = tqdm(test_loader)
    psnrs,ssims = [], []
    for clear_image, degrade_iamge, degrade_mat in bar:
        # degrade_iamge = Image.open(f'{argspar.input}/{i}')

        with torch.no_grad():
            clear_image:torch.Tensor = clear_image.to("cuda" if torch.cuda.is_available() else "cpu")
            degrade_iamge = degrade_iamge.to("cuda" if torch.cuda.is_available() else "cpu")
            lq_em = transform_resize(degrade_iamge).to("cuda" if torch.cuda.is_available() else "cpu")

            start_time = time.time()
            
            if args.prompt == None:
                text_embedding, _, _ = embedder(lq_em,'image_encoder')
                # text_embedding, _, [text] = embedder(lq_em,'image_encoder')
                # print(f'This is {text} degradation estimated by visual embedder.')
            else:
                text_embedding, _, [text] = embedder([args.prompt],'text_encoder')
                # print(f'This is {text} degradation generated by input text.')
            
            out = restorer(degrade_iamge, text_embedding)
            clear_image, out = clear_image.cpu().numpy(), out.cpu().numpy()
            # print(clear_image.shape)
            psnrs.append(compare_psnr(clear_image, out, data_range=1))
            ssims.append(compare_ssim(clear_image, out, channel_axis=1, data_range=1))
            bar.set_description(f"psnr:{psnrs[-1]:.5f},ssim:{ssims[-1]:.5f}")
            bar.update()
            # run_time = time.time()-start_time
            # time_record.append(run_time)

            # if args.concat:
            #     out = torch.cat((clear_image, degrade_iamge, out), dim=3)

            # imwrite(out, f'{args.output}/test.jpg', range=(0, 1))

            # print(f'Running Time: {run_time:.4f}.')
            # break
    # print(f'Average time is {np.mean(np.array(run_time))}')
    print(f"avg psnr:{sum(psnrs)/len(psnrs)}, avg ssim:{sum(ssims)/len(ssims)}, ")
            

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = "OneRestore Running")

    # load model
    parser.add_argument("--embedder-model-path", type=str, default = "./ckpts/embedder_model.tar", help = 'embedder model path')
    parser.add_argument("--restore-model-path", type=str, default = "./ckpts/onerestore_cdd-11.tar", help = 'restore model path')

    # select model automatic (prompt=False) or manual (prompt=True, text={'clear', 'low', 'haze', 'rain', 'snow',\
    #                'low_haze', 'low_rain', 'low_snow', 'haze_rain', 'haze_snow', 'low_haze_rain', 'low_haze_snow'})
    parser.add_argument("--prompt", type=str, default = None, help = 'prompt')

    parser.add_argument("--input", type=str, default = "./image/", help = 'image path')
    parser.add_argument("--output", type=str, default = "./output/", help = 'output path')
    parser.add_argument("--concat", action='store_true', help = 'output path')

    argspar = parser.parse_args()

    print_args(argspar)

    main(argspar)
